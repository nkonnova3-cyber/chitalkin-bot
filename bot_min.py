# -*- coding: utf-8 -*-
# –ß–∏—Ç–∞–ª–∫–∏–Ω&–¶–∏—Ñ–µ—Ä–∫–∏–Ω ‚Äî –≤–µ—Ä—Å–∏—è –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ PDF)
# ‚Ä¢ –ë–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–ª–æ–∂–µ–∫
# ‚Ä¢ PDF: —Ç–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∏—Å—É–µ—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ FPDF (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
# ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≤–æ–∑—Ä–∞—Å—Ç, –≥–µ—Ä–æ–π, –¥–ª–∏–Ω–∞, —Å—Ç–∏–ª—å —Å–∫–∞–∑–∫–∏, —Å–ø–∏—Å–æ–∫ ¬´–∏–∑–±–µ–≥–∞—Ç—å¬ª
# ‚Ä¢ –õ–∏–º–∏—Ç —Å–∫–∞–∑–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (DISABLE_LIMIT=1)

import os, json, random, tempfile, traceback
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from zoneinfo import ZoneInfo

from fpdf import FPDF
from telegram import Update, InputFile, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ENV
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN    = os.getenv("BOT_TOKEN", "–í–°–¢–ê–í–¨_–°–Æ–î–ê_–°–í–û–ô_BOT_TOKEN")
PUBLIC_URL   = os.getenv("PUBLIC_URL")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH")
PORT         = int(os.getenv("PORT", "8080"))

# –ª–∏–º–∏—Ç—ã: –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞
DISABLE_LIMIT = os.getenv("DISABLE_LIMIT", "1") == "1"
MAX_STORIES_PER_DAY = 10**9 if DISABLE_LIMIT else int(os.getenv("MAX_STORIES_PER_DAY", "3"))

ALERT_CHAT_ID = os.getenv("ALERT_CHAT_ID")

# –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å OpenAI –¥–ª—è —Ç–µ–∫—Å—Ç–∞
OPENAI_API_KEY    = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL_TEXT = os.getenv("OPENAI_MODEL_TEXT", "gpt-4.1-mini")
try:
    from openai import OpenAI
    oa_client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception:
    oa_client = None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# CONST / STORAGE
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ_MSK = ZoneInfo("Europe/Moscow")
DATA_DIR     = Path(".")
STATS_PATH   = DATA_DIR / "stats.json"
STORIES_PATH = DATA_DIR / "stories.json"

FONT_DIR  = Path("fonts")
FONT_REG  = FONT_DIR / "DejaVuSans.ttf"
FONT_BOLD = FONT_DIR / "DejaVuSans-Bold.ttf"
PDF_FONT   = "DejaVu"
PDF_FONT_B = "DejaVuB"

def msk_now() -> datetime: return datetime.now(TZ_MSK)
def msk_today_str() -> str: return msk_now().strftime("%Y-%m-%d")
def seconds_to_midnight_msk() -> int:
    now = msk_now()
    tomorrow = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
    return int((tomorrow - now).total_seconds())

def load_json(p: Path) -> Dict[str, Any]:
    if p.exists():
        try: return json.loads(p.read_text(encoding="utf-8"))
        except Exception: return {}
    return {}

def save_json(p: Path, data: Dict[str, Any]):
    try: p.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e: print(f"[FS] save_json error: {e}")

stats_all: Dict[str, Dict[str, Any]]   = load_json(STATS_PATH)
stories_all: Dict[str, Dict[str, Any]] = load_json(STORIES_PATH)

def default_stats() -> Dict[str, Any]:
    return {
        "stories_total": 0,
        "math_total": 0,
        "today_date": msk_today_str(),
        "today_stories": 0,
        "last_story_ts": None,
        "last_story_title": None,
    }

def default_user_stories() -> Dict[str, Any]:
    return {
        "last": None,
        "history": [],
        "profile": {
            "age": 6,
            "hero": "–∫–æ—Ç—ë–Ω–æ–∫",
            "length": "—Å—Ä–µ–¥–Ω—è—è",
            "style": "–∫–ª–∞—Å—Å–∏–∫–∞",   # –∫–ª–∞—Å—Å–∏–∫–∞ / –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ / –¥–µ—Ç–µ–∫—Ç–∏–≤ / —Ñ–∞–Ω—Ç–∞–∑–∏—è / –Ω–∞—É—á–ø–æ–ø
            "avoid": []
        },
    }

def get_user_stats(uid: int) -> Dict[str, Any]:
    u = stats_all.get(str(uid))
    if not u:
        u = default_stats(); stats_all[str(uid)] = u; save_json(STATS_PATH, stats_all)
    if u.get("today_date") != msk_today_str():
        u["today_date"] = msk_today_str(); u["today_stories"] = 0; save_json(STATS_PATH, stats_all)
    return u

def inc_story_counters(uid: int, title: str):
    u = get_user_stats(uid)
    u["stories_total"] += 1
    u["today_stories"] += 1
    u["last_story_ts"] = msk_now().isoformat()
    u["last_story_title"] = title
    stats_all[str(uid)] = u
    save_json(STATS_PATH, stats_all)

def inc_math_counter(uid: int):
    u = get_user_stats(uid); u["math_total"] += 1
    stats_all[str(uid)] = u; save_json(STATS_PATH, stats_all)

def get_profile(uid: int) -> Dict[str, Any]:
    rec = stories_all.get(str(uid))
    if not rec:
        rec = default_user_stories(); stories_all[str(uid)] = rec; save_json(STORIES_PATH, stories_all)
    return rec["profile"]

def save_profile(uid: int, prof: Dict[str, Any]):
    rec = stories_all.get(str(uid), default_user_stories())
    rec["profile"] = prof; stories_all[str(uid)] = rec; save_json(STORIES_PATH, stories_all)

def store_user_story(uid: int, story: Dict[str, Any]):
    rec = stories_all.get(str(uid), default_user_stories())
    stamped = dict(story); stamped["ts"] = msk_now().isoformat()
    rec["last"] = stamped
    hist = rec.get("history", []); hist.append(stamped); rec["history"] = hist[-25:]
    stories_all[str(uid)] = rec; save_json(STORIES_PATH, stories_all)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# STORY: –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (+ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ OpenAI –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
STORY_STYLES = {
    "–∫–ª–∞—Å—Å–∏–∫–∞":  "–¥–æ–±—Ä–∞—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∫–∞–∑–∫–∞ —Å —è—Å–Ω–æ–π –º–æ—Ä–∞–ª—å—é",
    "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ": "–¥–∏–Ω–∞–º–∏—á–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Å –º–∏–Ω–∏-–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏ –∏ –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â—å—é",
    "–¥–µ—Ç–µ–∫—Ç–∏–≤":  "–ª—ë–≥–∫–∏–π –¥–µ—Ç—Å–∫–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤: –∑–∞–≥–∞–¥–∫–∞ ‚Üí –ø–æ–¥—Å–∫–∞–∑–∫–∏ ‚Üí –¥–æ–±—Ä—ã–π —Ñ–∏–Ω–∞–ª",
    "—Ñ–∞–Ω—Ç–∞–∑–∏—è":  "–≤–æ–ª—à–µ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å –º—è–≥–∫–∏–º —á—É–¥–æ–º –∏ –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏",
    "–Ω–∞—É—á–ø–æ–ø":   "–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è, –≥–µ—Ä–æ–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ/—ç—Ñ—Ñ–µ–∫—Ç",
}

def _avoid_filter(text: str, avoid: List[str]) -> str:
    if not avoid: return text
    for w in [a.strip() for a in avoid if a.strip()]:
        text = text.replace(w, "üåü")
    return text

def _target_len(length: str) -> int:
    return {"–∫–æ—Ä–æ—Ç–∫–∞—è": 3, "—Å—Ä–µ–¥–Ω—è—è": 4, "–¥–ª–∏–Ω–Ω–∞—è": 5}.get((length or "").lower(), 4)

def _local_story(age: int, hero: str, moral: str, length: str, style: str, avoid: List[str]) -> Dict[str, Any]:
    hero = hero or "–≥–µ—Ä–æ–π"
    moral = moral or "–¥–æ–±—Ä–æ—Ç–∞"
    style_note = STORY_STYLES.get(style, STORY_STYLES["–∫–ª–∞—Å—Å–∏–∫–∞"])

    starts = [
        f"–ñ–∏–ª-–±—ã–ª {hero}, –∫–æ—Ç–æ—Ä—ã–π –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ —Ç–∞–∫–æ–µ {moral}.",
        f"–û–¥–Ω–∞–∂–¥—ã {hero} –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ —Ä–µ—à–∏–ª –∏—Å–∫–∞—Ç—å {moral} –≤ —Å–≤–æ–∏—Ö –¥–µ–ª–∞—Ö.",
        f"–° —É—Ç—Ä–∞ {hero} –ø–æ–Ω—è–ª: —Å–µ–≥–æ–¥–Ω—è –æ–Ω —É–∑–Ω–∞–µ—Ç, –ø–æ—á–µ–º—É {moral} –≤–∞–∂–Ω–∞.",
    ]
    middles = [
        f"–ü–æ –ø—É—Ç–∏ {hero} –≤—Å—Ç—Ä–µ—Ç–∏–ª(–∞) –¥—Ä—É–∑–µ–π, –∏ –≤–º–µ—Å—Ç–µ –æ–Ω–∏ –ø–æ–º–æ–≥–∞–ª–∏ —Ç–µ–º, –∫—Ç–æ –ø—Ä–æ—Å–∏–ª.",
        f"–ò–Ω–æ–≥–¥–∞ –±—ã–ª–æ —Ç—Ä—É–¥–Ω–æ, –Ω–æ –∫–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –¥–µ–ª–∞–ª –¥–µ–Ω—å —Å–≤–µ—Ç–ª–µ–µ.",
        f"–í–µ—Ç–µ—Ä —à—É—Ä—à–∞–ª –≤ –ª–∏—Å—Ç–≤–µ, –ø–∞—Ö–ª–æ –º—ë–¥–æ–º –∏ —Ç—Ä–∞–≤–∞–º–∏, –∞ —Å–µ—Ä–¥—Ü–µ {hero} —Ç–µ–ø–ª–µ–ª–æ.",
        f"–ö—Ä–æ—à–µ—á–Ω—ã–µ –¥–æ–±—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏ –æ—Ç—Ä–∞–∂–∞–ª–∏—Å—å, –∫–∞–∫ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –∑–∞–π—á–∏–∫–∏ –≤ –æ–∫–Ω–∞—Ö.",
        f"–û–Ω–∏ —Ä–µ—à–∞–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–∞–≥–∞–¥–∫–∏ –∏ —É—á–∏–ª–∏—Å—å —Å–ª—É—à–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞.",
    ]
    endings = [
        f"–ö –≤–µ—á–µ—Ä—É {hero} –ø–æ–Ω—è–ª(–∞): {moral} ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –¥–µ–ª–∞—é—Ç, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä—è—Ç.",
        f"–ò {hero} —É–ª—ã–±–Ω—É–ª—Å—è(–∞—Å—å): {moral} –∂–∏–≤—ë—Ç –≤ –∑–∞–±–æ—Ç–µ –∏ –≤–Ω–∏–º–∞–Ω–∏–∏.",
        f"–° —Ç–µ—Ö –ø–æ—Ä {hero} –∑–∞–ø–æ–º–Ω–∏–ª(–∞): {moral} —Å–æ–≥—Ä–µ–≤–∞–µ—Ç –¥–∞–∂–µ –≤ —Ö–æ–ª–æ–¥–Ω—ã–π –¥–µ–Ω—å.",
    ]

    n_par = _target_len(length)
    body = [random.choice(starts)]
    while len(body) < n_par - 1:
        body.append(random.choice(middles))
    body.append(random.choice(endings))

    text = "\n\n".join(body)
    text = _avoid_filter(text, avoid)

    title = f"{hero.capitalize()} –∏ —É—Ä–æ–∫ –ø—Ä–æ ¬´{moral}¬ª"
    questions = [
        f"–ß—Ç–æ {hero} —É–∑–Ω–∞–ª(–∞) –ø—Ä–æ {moral}?",
        "–ö–∞–∫–∏–µ —à–∞–≥–∏ –ø–æ–º–æ–≥–ª–∏ –≥–µ—Ä–æ—è–º –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?",
        "–ì–¥–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞—Å—å –¥—Ä—É–∂–±–∞?",
        "–ß—Ç–æ –±—ã —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –Ω–∞ –º–µ—Å—Ç–µ –≥–µ—Ä–æ—è?",
    ]
    return {"title": title, "text": text, "moral": f"–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å: {moral}.", "questions": questions, "style_note": style_note}

def synthesize_story(age: int, hero: str, moral: str, length: str, avoid: List[str], style: str) -> Dict[str, Any]:
    data = _local_story(age, hero, moral, length, style, avoid)

    # –µ—Å–ª–∏ –µ—Å—Ç—å OpenAI ‚Äî –º—è–≥–∫–æ –æ—Ç–ø–æ–ª–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫)
    if oa_client:
        try:
            prompt = f"""
–£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ {age} –ª–µ—Ç: —Å–¥–µ–ª–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ–±—Ä–∞–∑–Ω–µ–µ,
–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ—Ç—É –∏ –¥–æ–±—Ä–æ—Ç—É. –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–∑—Ä–æ—Å–ª—ã–µ —Ç–µ–º—ã –∏ —Å–ª–æ–∂–Ω—É—é –ª–µ–∫—Å–∏–∫—É.
–í–µ—Ä–Ω–∏ JSON {{"text":"...","moral":"...","questions":[...]}}. –ò—Å—Ö–æ–¥–Ω–∏–∫:
{json.dumps({"text": data["text"], "moral": data["moral"], "questions": data["questions"]}, ensure_ascii=False)}
"""
            resp = oa_client.responses.create(model=OPENAI_MODEL_TEXT, input=prompt)
            try:
                js = json.loads(resp.output_text or "{}")
                if isinstance(js, dict) and js.get("text"):
                    data["text"] = _avoid_filter(js["text"], avoid)
                    data["moral"] = js.get("moral", data["moral"])
                    qs = js.get("questions"); 
                    if isinstance(qs, list) and len(qs) >= 4:
                        data["questions"] = qs[:4]
            except Exception:
                pass
        except Exception as e:
            print(f"[AI text] skip polishing: {e}")

    return data

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# PDF (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class StoryPDF(FPDF):
    def header(self): pass

def _ensure_unicode_fonts(pdf: FPDF) -> bool:
    try:
        if not (FONT_REG.exists() and FONT_BOLD.exists()):
            print("[PDF] TTF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (fonts/DejaVuSans*.ttf)")
            return False
        pdf.add_font(PDF_FONT,   "", str(FONT_REG),  uni=True)
        pdf.add_font(PDF_FONT_B, "", str(FONT_BOLD), uni=True)
        return True
    except Exception as e:
        print(f"[PDF] font error: {e}")
        return False

def render_story_pdf(path: Path, data: Dict[str, Any]):
    pdf = StoryPDF(orientation="P", unit="mm", format="A4")
    pdf.set_auto_page_break(auto=True, margin=15)
    uni = _ensure_unicode_fonts(pdf)

    # —Ç–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    pdf.add_page()
    pdf.set_fill_color(235, 240, 255)
    pdf.rect(0, 0, 210, 297, style="F")
    pdf.set_draw_color(60, 80, 180)
    pdf.set_line_width(1.2)
    pdf.rect(8, 8, 210-16, 297-16)

    if uni: pdf.set_font(PDF_FONT_B, size=28)
    else:   pdf.set_font("Helvetica", style="B", size=28)
    pdf.set_xy(15, 60)
    pdf.multi_cell(0, 12, data["title"], align="C")

    if uni: pdf.set_font(PDF_FONT, size=12)
    else:   pdf.set_font("Helvetica", size=12)
    pdf.ln(4)
    pdf.multi_cell(0, 8, "–°–∫–∞–∑–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞. –ë–µ–∑ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π.", align="C")

    # —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    pdf.add_page()
    if uni: pdf.set_font(PDF_FONT_B, size=16)
    else:   pdf.set_font("Helvetica", style="B", size=16)
    pdf.multi_cell(0, 8, data["title"]); pdf.ln(2)

    if uni: pdf.set_font(PDF_FONT, size=12)
    else:   pdf.set_font("Helvetica", size=12)
    for p in data["text"].split("\n\n"):
        pdf.multi_cell(0, 7, p); pdf.ln(1)

    pdf.ln(2)
    if uni: pdf.set_font(PDF_FONT_B, size=13)
    else:   pdf.set_font("Helvetica", style="B", size=13)
    pdf.cell(0, 7, "–ú–æ—Ä–∞–ª—å", ln=1)

    if uni: pdf.set_font(PDF_FONT, size=12)
    else:   pdf.set_font("Helvetica", size=12)
    pdf.multi_cell(0, 7, data["moral"]); pdf.ln(2)

    if uni: pdf.set_font(PDF_FONT_B, size=13)
    else:   pdf.set_font("Helvetica", style="B", size=13)
    pdf.cell(0, 7, "–í–æ–ø—Ä–æ—Å—ã", ln=1)

    if uni: pdf.set_font(PDF_FONT, size=12)
    else:   pdf.set_font("Helvetica", size=12)
    for i, q in enumerate(data["questions"][:4], 1):
        pdf.multi_cell(0, 7, f"{i}) {q}")

    pdf.output(str(Path(path)))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# UI + FLOW (–±–µ–∑ –∫–Ω–æ–ø–æ–∫-–º–µ–Ω—é, —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _safe_int(text: str, default: int) -> int:
    try: return max(3, min(14, int(text)))
    except Exception: return default

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args or []
    if args and args[0].lower() in {"story","math","parent","settings","delete"}:
        return await globals()[args[0].lower()+"_cmd"](update, context)
    await update.effective_message.reply_html(
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ß–∏—Ç–∞–ª–∫–∏–Ω&–¶–∏—Ñ–µ—Ä–∫–∏–Ω ü¶â‚ûïüßÆ</b>\n\n"
        "‚Ä¢ /story ‚Äî —Å–∫–∞–∑–∫–∞ (—Ç–µ–∫—Å—Ç ‚Üí PDF)\n"
        "‚Ä¢ /math ‚Äî 10 –º–∏–Ω—É—Ç –ø—Ä–∏–º–µ—Ä–æ–≤\n"
        "‚Ä¢ /parent ‚Äî –æ—Ç—á—ë—Ç —Ä–æ–¥–∏—Ç–µ–ª—é\n"
        "‚Ä¢ /settings ‚Äî –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞ (–≤–æ–∑—Ä–∞—Å—Ç, –≥–µ—Ä–æ–π, –¥–ª–∏–Ω–∞, —Å—Ç–∏–ª—å, ¬´–∏–∑–±–µ–≥–∞—Ç—å¬ª)\n"
        "‚Ä¢ /delete ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
        f"<i>–õ–∏–º–∏—Ç: {'–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (—Ç–µ—Å—Ç) ' if DISABLE_LIMIT else str(MAX_STORIES_PER_DAY)+'/–¥–µ–Ω—å'}; —Å–±—Ä–æ—Å –≤ 00:00 –ú—Å–∫.</i>"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def settings_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    prof = get_profile(uid)
    ud = context.user_data; ud.clear()
    ud["flow"] = "settings"; ud["step"] = "age"; ud["profile"] = prof.copy()
    await update.effective_message.reply_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
        f"–°–µ–π—á–∞—Å: –≤–æ–∑—Ä–∞—Å—Ç={prof['age']}, –≥–µ—Ä–æ–π=¬´{prof['hero']}¬ª, –¥–ª–∏–Ω–∞={prof['length']}, —Å—Ç–∏–ª—å=¬´{prof['style']}¬ª, –∏–∑–±–µ–≥–∞—Ç—å={', '.join(prof['avoid']) or '‚Äî'}.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (3‚Äì14):"
    )

async def story_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ustat = get_user_stats(uid)
    if not DISABLE_LIMIT and ustat["today_stories"] >= MAX_STORIES_PER_DAY:
        secs = seconds_to_midnight_msk(); h = secs // 3600; m = (secs % 3600) // 60
        await update.effective_message.reply_text(
            f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ù–æ–≤—ã–π –¥–µ–Ω—å —á–µ—Ä–µ–∑ {h} —á {m} –º–∏–Ω."
        ); return

    prof = get_profile(uid)
    ud = context.user_data; ud.clear()
    ud["flow"] = "story"; ud["step"] = "age"; ud["params"] = {
        "age": prof["age"], "hero": prof["hero"], "length": prof["length"],
        "style": prof["style"]
    }
    await update.effective_message.reply_text(
        f"–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Å–∫–∞–∑–∫—É. –°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–µ–±—ë–Ω–∫—É? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {prof['age']})"
    )

async def parent_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    u = get_user_stats(uid)
    last_title = u.get("last_story_title") or "‚Äî"
    last_when = u.get("last_story_ts")
    if last_when:
        try: last_when = datetime.fromisoformat(last_when).astimezone(TZ_MSK).strftime("%d.%m.%Y %H:%M")
        except Exception: last_when = "‚Äî"
    else: last_when = "‚Äî"
    prof = get_profile(uid)
    await update.effective_message.reply_text(
        "üë™ –û—Ç—á—ë—Ç —Ä–æ–¥–∏—Ç–µ–ª—é\n\n"
        f"–°–µ–≥–æ–¥–Ω—è: —Å–∫–∞–∑–æ–∫ {u.get('today_stories',0)} / {('‚àû' if DISABLE_LIMIT else MAX_STORIES_PER_DAY)}\n"
        f"–ò—Ç–æ–≥–æ: —Å–∫–∞–∑–æ–∫ {u.get('stories_total',0)}, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ {u.get('math_total',0)}\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∫–∞–∑–∫–∞: {last_title} ‚Ä¢ {last_when}\n\n"
        "–ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"–≤–æ–∑—Ä–∞—Å—Ç={prof['age']}, –≥–µ—Ä–æ–π=¬´{prof['hero']}¬ª, –¥–ª–∏–Ω–∞={prof['length']}, —Å—Ç–∏–ª—å=¬´{prof['style']}¬ª, –∏–∑–±–µ–≥–∞—Ç—å={', '.join(prof['avoid']) or '‚Äî'}"
    )

async def delete_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    stats_all.pop(str(uid), None); save_json(STATS_PATH, stats_all)
    stories_all.pop(str(uid), None); save_json(STORIES_PATH, stories_all)
    context.user_data.clear()
    await update.effective_message.reply_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üôÇ")

def make_math_sheet():
    problems, answers = [], []
    for _ in range(10):
        a, b = random.randint(4, 15), random.randint(1, 9)
        if random.random() < 0.5:
            problems.append(f"{a} + {b} = "); answers.append(str(a + b))
        else:
            if b > a: a, b = b, a
            problems.append(f"{a} ‚àí {b} = "); answers.append(str(a - b))
    return problems, answers

async def math_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    pr, an = make_math_sheet()
    await update.effective_message.reply_text("üßÆ 10 –º–∏–Ω—É—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏:\n" + "\n".join([f"{i+1}) {p}" for i,p in enumerate(pr)]))
    await update.effective_message.reply_text("–û—Ç–≤–µ—Ç—ã:\n" + "\n".join([f"{i+1}) {a}" for i,a in enumerate(an)]))
    inc_math_counter(uid)

# —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (settings/story)
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ud = context.user_data; flow = ud.get("flow"); step = ud.get("step")
    if not flow: return
    text = (update.effective_message.text or "").strip()

    if flow == "settings":
        prof = ud.get("profile", {})
        if step == "age":
            prof["age"] = _safe_int(text, prof.get("age",6)); ud["step"] = "hero"
            await update.effective_message.reply_text("–ì–µ—Ä–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–æ—Ç—ë–Ω–æ–∫, —ë–∂–∏–∫, –ú–∞—à–∞):"); return
        if step == "hero":
            prof["hero"] = text or prof.get("hero","–≥–µ—Ä–æ–π"); ud["step"] = "length"
            await update.effective_message.reply_text("–î–ª–∏–Ω–∞ —Å–∫–∞–∑–∫–∏? (–∫–æ—Ä–æ—Ç–∫–∞—è / —Å—Ä–µ–¥–Ω—è—è / –¥–ª–∏–Ω–Ω–∞—è)"); return
        if step == "length":
            length = text.lower()
            prof["length"] = length if length in {"–∫–æ—Ä–æ—Ç–∫–∞—è","—Å—Ä–µ–¥–Ω—è—è","–¥–ª–∏–Ω–Ω–∞—è"} else "—Å—Ä–µ–¥–Ω—è—è"
            ud["step"] = "style"
            await update.effective_message.reply_text("–°—Ç–∏–ª—å? (–∫–ª–∞—Å—Å–∏–∫–∞ / –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ / –¥–µ—Ç–µ–∫—Ç–∏–≤ / —Ñ–∞–Ω—Ç–∞–∑–∏—è / –Ω–∞—É—á–ø–æ–ø)"); return
        if step == "style":
            st = text.lower(); prof["style"] = st if st in STORY_STYLES else "–∫–ª–∞—Å—Å–∏–∫–∞"
            ud["step"] = "avoid"
            await update.effective_message.reply_text("–ö–∞–∫–∏—Ö —Ç–µ–º –∏–∑–±–µ–≥–∞—Ç—å? –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ ¬´–Ω–µ—Ç¬ª)."); return
        if step == "avoid":
            prof["avoid"] = [] if text.lower() in {"–Ω–µ—Ç","no","none"} else [w.strip() for w in text.split(",") if w.strip()]
            save_profile(update.effective_user.id, prof); ud.clear()
            await update.effective_message.reply_text("–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ"); return

    if flow == "story":
        p = ud["params"]
        if step == "age":
            p["age"] = _safe_int(text, p.get("age",6)); ud["step"] = "hero"
            await update.effective_message.reply_text(f"–ö—Ç–æ –±—É–¥–µ—Ç –≥–µ—Ä–æ–µ–º? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ¬´{p.get('hero','–≥–µ—Ä–æ–π')}¬ª)"); return
        if step == "hero":
            p["hero"] = text or p.get("hero","–≥–µ—Ä–æ–π"); ud["step"] = "moral"
            await update.effective_message.reply_text("–ö–∞–∫—É—é –∏–¥–µ—é/–º–æ—Ä–∞–ª—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å? (–¥—Ä—É–∂–±–∞, —â–µ–¥—Ä–æ—Å—Ç—å, —Å–º–µ–ª–æ—Å—Ç—å...)"); return
        if step == "moral":
            ud["moral"] = text or "–¥–æ–±—Ä–æ—Ç–∞"; ud["step"] = "length"
            await update.effective_message.reply_text(f"–ö–∞–∫–∞—è –¥–ª–∏–Ω–∞? (–∫–æ—Ä–æ—Ç–∫–∞—è / —Å—Ä–µ–¥–Ω—è—è / –¥–ª–∏–Ω–Ω–∞—è) ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {p.get('length','—Å—Ä–µ–¥–Ω—è—è')}"); return
        if step == "length":
            length = text.lower() if text else p.get("length","—Å—Ä–µ–¥–Ω—è—è")
            p["length"] = length if length in {"–∫–æ—Ä–æ—Ç–∫–∞—è","—Å—Ä–µ–¥–Ω—è—è","–¥–ª–∏–Ω–Ω–∞—è"} else "—Å—Ä–µ–¥–Ω—è—è"

            uid = update.effective_user.id
            prof = get_profile(uid)
            ustat = get_user_stats(uid)
            if not DISABLE_LIMIT and ustat["today_stories"] >= MAX_STORIES_PER_DAY:
                secs = seconds_to_midnight_msk(); h = secs // 3600; m = (secs % 3600) // 60
                await update.effective_message.reply_text(f"–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ù–æ–≤—ã–π –¥–µ–Ω—å —á–µ—Ä–µ–∑ {h} —á {m} –º–∏–Ω."); ud.clear(); return

            data = synthesize_story(p["age"], p["hero"], ud["moral"], p["length"], avoid=prof["avoid"], style=prof["style"])
            inc_story_counters(uid, data["title"])
            store_user_story(uid, data)

            # —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç
            msg = (
                f"üìñ <b>{data['title']}</b>\n\n{data['text']}\n\n"
                f"<b>–ú–æ—Ä–∞–ª—å:</b> {data['moral']}\n\n"
                "–í–æ–ø—Ä–æ—Å—ã:\n"
                f"1) {data['questions'][0]}\n"
                f"2) {data['questions'][1]}\n"
                f"3) {data['questions'][2]}\n"
                f"4) {data['questions'][3]}"
            )
            await update.effective_message.reply_html(msg)

            # pdf –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫
            pdf_path = Path(f"skazka_{uid}.pdf").resolve()
            render_story_pdf(pdf_path, data)
            await update.effective_message.reply_document(InputFile(str(pdf_path), filename=pdf_path.name))

            ud.clear(); return

# –æ—à–∏–±–∫–∏ –≤ –∞–ª—ë—Ä—Ç-—á–∞—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not ALERT_CHAT_ID:
        print("[ERR]", "".join(traceback.format_exception(None, context.error, context.error.__traceback__)))
        return
    try:
        tb = "".join(traceback.format_exception(None, context.error, context.error.__traceback__))
        text = "üö® <b>–û—à–∏–±–∫–∞</b>\n\n<pre>" + (tb[-3500:] if len(tb)>3500 else tb) + "</pre>"
        await context.bot.send_message(chat_id=int(ALERT_CHAT_ID), text=text, parse_mode="HTML")
    except Exception as e:
        print("[ERR alert send]", e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# RUN
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def post_init(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start","–º–µ–Ω—é"),
        BotCommand("story","—Å–∫–∞–∑–∫–∞ (—Ç–µ–∫—Å—Ç ‚Üí PDF)"),
        BotCommand("math","10 –º–∏–Ω—É—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏"),
        BotCommand("parent","–æ—Ç—á—ë—Ç —Ä–æ–¥–∏—Ç–µ–ª—é"),
        BotCommand("settings","–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"),
        BotCommand("delete","—É–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"),
        BotCommand("help","–ø–æ–º–æ—â—å"),
    ])

def main():
    if BOT_TOKEN.startswith("–í–°–¢–ê–í–¨_"):
        raise SystemExit("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ BOT_TOKEN (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è).")

    app = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("story", story_cmd))
    app.add_handler(CommandHandler("math", math_cmd))
    app.add_handler(CommandHandler("parent", parent_cmd))
    app.add_handler(CommandHandler("settings", settings_cmd))
    app.add_handler(CommandHandler("delete", delete_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_error_handler(error_handler)

    if PUBLIC_URL:
        path = (WEBHOOK_PATH or BOT_TOKEN).lstrip("/")
        webhook_url = f"{PUBLIC_URL.rstrip('/')}/{path}"
        print(f"[WEBHOOK] starting on 0.0.0.0:{PORT}, path=/{path}")
        print(f"[WEBHOOK] set webhook ‚Üí {webhook_url}")
        app.run_webhook(listen="0.0.0.0", port=PORT, url_path=path, webhook_url=webhook_url, drop_pending_updates=True)
    else:
        print("[POLLING] starting‚Ä¶")
        app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
