# -*- coding: utf-8 -*-
# –ß–∏—Ç–∞–ª–∫–∏–Ω&–¶–∏—Ñ–µ—Ä–∫–∏–Ω ‚Äî –¢–ï–ö–°–¢-–¢–û–õ–¨–ö–û: –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫–∞–∑–∫–∏ —Å –∂—ë—Å—Ç–∫–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–º—ã—Å–ª–∞ –∏ –¥–ª–∏–Ω—ã
# ‚Ä¢ –ö–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ—Ç. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç + PDF.
# ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: outline ‚Üí draft ‚Üí critique&revise ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—ë–º–∞.
# ‚Ä¢ –î–ª–∏–Ω—É –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å: –∫–æ—Ä–æ—Ç–∫–∞—è (250‚Äì400), —Å—Ä–µ–¥–Ω—è—è (450‚Äì700), –¥–ª–∏–Ω–Ω–∞—è (800‚Äì1100).
# ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≤–æ–∑—Ä–∞—Å—Ç, –≥–µ—Ä–æ–π, –¥–ª–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å—Ç–∏–ª—å, ¬´–∏–∑–±–µ–≥–∞—Ç—å¬ª.

import os, json, random, re, traceback
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple
from zoneinfo import ZoneInfo

from fpdf import FPDF
from telegram import Update, InputFile, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ENV
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN    = os.getenv("BOT_TOKEN", "–í–°–¢–ê–í–¨_–°–Æ–î–ê_–°–í–û–ô_BOT_TOKEN")
PUBLIC_URL   = os.getenv("PUBLIC_URL")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH")
PORT         = int(os.getenv("PORT", "8080"))

# –ª–∏–º–∏—Ç –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤
DISABLE_LIMIT = os.getenv("DISABLE_LIMIT", "1") == "1"
MAX_STORIES_PER_DAY = 10**9 if DISABLE_LIMIT else int(os.getenv("MAX_STORIES_PER_DAY", "3"))

ALERT_CHAT_ID = os.getenv("ALERT_CHAT_ID")

# OpenAI (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞; –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
OPENAI_API_KEY    = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL_TEXT = os.getenv("OPENAI_MODEL_TEXT", "gpt-4.1-mini")
try:
    from openai import OpenAI
    oa_client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception:
    oa_client = None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# STORAGE
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TZ_MSK = ZoneInfo("Europe/Moscow")
DATA_DIR     = Path(".")
STATS_PATH   = DATA_DIR / "stats.json"
STORIES_PATH = DATA_DIR / "stories.json"

FONT_DIR  = Path("fonts")
FONT_REG  = FONT_DIR / "DejaVuSans.ttf"
FONT_BOLD = FONT_DIR / "DejaVuSans-Bold.ttf"
PDF_FONT   = "DejaVu"
PDF_FONT_B = "DejaVuB"

def msk_now() -> datetime: return datetime.now(TZ_MSK)
def msk_today_str() -> str: return msk_now().strftime("%Y-%m-%d")

def load_json(p: Path) -> Dict[str, Any]:
    if p.exists():
        try: return json.loads(p.read_text(encoding="utf-8"))
        except Exception: return {}
    return {}

def save_json(p: Path, data: Dict[str, Any]):
    try: p.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e: print(f"[FS] save_json error: {e}")

stats_all: Dict[str, Dict[str, Any]]   = load_json(STATS_PATH)
stories_all: Dict[str, Dict[str, Any]] = load_json(STORIES_PATH)

def default_stats() -> Dict[str, Any]:
    return {
        "stories_total": 0, "math_total": 0,
        "today_date": msk_today_str(), "today_stories": 0,
        "last_story_ts": None, "last_story_title": None,
    }

def default_user_stories() -> Dict[str, Any]:
    return {
        "last": None, "history": [],
        "profile": {
            "age": 6,
            "hero": "–∫–æ—Ç—ë–Ω–æ–∫",
            "length": "—Å—Ä–µ–¥–Ω—è—è",            # –∫–æ—Ä–æ—Ç–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–¥–ª–∏–Ω–Ω–∞—è
            "style": "–∫–ª–∞—Å—Å–∏–∫–∞",            # –∫–ª–∞—Å—Å–∏–∫–∞/–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ/–¥–µ—Ç–µ–∫—Ç–∏–≤/—Ñ–∞–Ω—Ç–∞–∑–∏—è/–Ω–∞—É—á–ø–æ–ø
            "avoid": []
        },
    }

def get_user_stats(uid: int) -> Dict[str, Any]:
    u = stats_all.get(str(uid))
    if not u:
        u = default_stats(); stats_all[str(uid)] = u; save_json(STATS_PATH, stats_all)
    if u.get("today_date") != msk_today_str():
        u["today_date"] = msk_today_str(); u["today_stories"] = 0; save_json(STATS_PATH, stats_all)
    return u

def inc_story_counters(uid: int, title: str):
    u = get_user_stats(uid)
    u["stories_total"] += 1
    u["today_stories"] += 1
    u["last_story_ts"] = msk_now().isoformat()
    u["last_story_title"] = title
    stats_all[str(uid)] = u
    save_json(STATS_PATH, stats_all)

def inc_math_counter(uid: int):
    u = get_user_stats(uid); u["math_total"] += 1
    stats_all[str(uid)] = u; save_json(STATS_PATH, stats_all)

def get_profile(uid: int) -> Dict[str, Any]:
    rec = stories_all.get(str(uid))
    if not rec:
        rec = default_user_stories(); stories_all[str(uid)] = rec; save_json(STORIES_PATH, stories_all)
    return rec["profile"]

def save_profile(uid: int, prof: Dict[str, Any]):
    rec = stories_all.get(str(uid), default_user_stories())
    rec["profile"] = prof; stories_all[str(uid)] = rec; save_json(STORIES_PATH, stories_all)

def store_user_story(uid: int, story: Dict[str, Any]):
    rec = stories_all.get(str(uid), default_user_stories())
    stamped = dict(story); stamped["ts"] = msk_now().isoformat()
    rec["last"] = stamped
    hist = rec.get("history", []); hist.append(stamped); rec["history"] = hist[-25:]
    stories_all[str(uid)] = rec; save_json(STORIES_PATH, stories_all)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –î–õ–ò–ù–ê/–í–û–ó–†–ê–°–¢/–°–¢–ò–õ–¨
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
STORY_STYLES = {
    "–∫–ª–∞—Å—Å–∏–∫–∞":   "–¥–æ–±—Ä–∞—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∫–∞–∑–∫–∞ —Å —è—Å–Ω–æ–π –º–æ—Ä–∞–ª—å—é",
    "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ":"–¥–∏–Ω–∞–º–∏—á–Ω–æ–µ –¥–µ—Ç—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Å –º–∏–Ω–∏-–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏ –∏ –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â—å—é",
    "–¥–µ—Ç–µ–∫—Ç–∏–≤":   "–ª—ë–≥–∫–∏–π –¥–µ—Ç—Å–∫–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤: –∑–∞–≥–∞–¥–∫–∞ ‚Üí –ø–æ–¥—Å–∫–∞–∑–∫–∏ ‚Üí –¥–æ–±—Ä—ã–π —Ñ–∏–Ω–∞–ª",
    "—Ñ–∞–Ω—Ç–∞–∑–∏—è":   "–≤–æ–ª—à–µ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å –º—è–≥–∫–∏–º —á—É–¥–æ–º –∏ –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏",
    "–Ω–∞—É—á–ø–æ–ø":    "–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è: –≥–µ—Ä–æ–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ/—ç—Ñ—Ñ–µ–∫—Ç",
}

LEN_BANDS = {
    "–∫–æ—Ä–æ—Ç–∫–∞—è": (250, 400),
    "—Å—Ä–µ–¥–Ω—è—è":  (450, 700),
    "–¥–ª–∏–Ω–Ω–∞—è":  (800, 1100),
}

def word_count_ru(text: str) -> int:
    # –≥—Ä—É–±–æ, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    return len(re.findall(r"[–ê-–Ø–∞-—è–Å—ëA-Za-z0-9-]+", text))

def within_band(text: str, band: Tuple[int,int]) -> bool:
    wc = word_count_ru(text)
    return band[0] <= wc <= band[1]

def clamp_to_band_locally(text: str, band: Tuple[int,int]) -> str:
    # –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ ‚Äî –º—è–≥–∫–æ —É—Ä–µ–∑–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è; –µ—Å–ª–∏ –∫–æ—Ä–æ—á–µ ‚Äî —Å–ª–µ–≥–∫–∞ —Ä–∞—Å—à–∏—Ä—è–µ–º —Å–≤—è–∑–∫–∞–º–∏.
    wc = word_count_ru(text)
    if wc > band[1]:
        parts = re.split(r"(\n\n+)", text)  # –∞–±–∑–∞—Ü—ã
        while word_count_ru("".join(parts)) > band[1] and len(parts) > 1:
            parts = parts[:-1]  # —É–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ä–µ–ø–ª–∏–∫—É/–∞–±–∑–∞—Ü
        text = "".join(parts)
        # –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –¥–ª–∏–Ω–Ω–æ ‚Äî –æ—Ç—Ä–µ–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sents = re.split(r"(?<=[\.\!\?])\s+", text)
        while word_count_ru(" ".join(sents)) > band[1] and len(sents) > 3:
            sents = sents[:-1]
        return " ".join(sents)
    if wc < band[0]:
        gap = band[0] - wc
        filler = (
            " –ú–∞–ª—ã–µ —à–∞–≥–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –±–æ–ª—å—à–∏–µ –ø–µ—Ä–µ–º–µ–Ω—ã. "
            "–ö–æ–≥–¥–∞ —Ä—è–¥–æ–º –¥–æ–±—Ä—ã–µ –ª—é–¥–∏, –ª—é–±–æ–µ –¥–µ–ª–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–Ω—è—Ç–Ω–µ–µ –∏ —Å–≤–µ—Ç–ª–µ–µ. "
        )
        # –¥–æ–±–∞–≤–∏–º 1‚Äì3 —Ñ—Ä–∞–∑—ã –Ω–∞ –∫–æ–Ω—Ü–µ
        need = 1 if gap < 40 else (2 if gap < 120 else 3)
        return text.rstrip() + "\n\n" + (filler * need).strip()
    return text

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ö–ê–ó–ö–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _avoid_filter(text: str, avoid: List[str]) -> str:
    if not avoid: return text
    for w in [a.strip() for a in avoid if a.strip()]:
        text = re.sub(re.escape(w), "üåü", text, flags=re.IGNORECASE)
    return text

def _local_story(age: int, hero: str, moral: str, target_band: Tuple[int,int], style: str, avoid: List[str]) -> Dict[str, Any]:
    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑—É–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: –ø—Ä–æ—Å—Ç–∞—è –¥—É–≥–∞ ¬´—Ü–µ–ª—å ‚Üí –ø–æ–ø—ã—Ç–∫–∏ ‚Üí —Ä–∞–∑–≤—è–∑–∫–∞¬ª, 3‚Äì5 –∞–±–∑–∞—Ü–µ–≤, —Ü–µ–ª–µ–≤–∞—è –¥–ª–∏–Ω–∞.
    hero  = hero or "–≥–µ—Ä–æ–π"
    moral = moral or "–¥–æ–±—Ä–æ—Ç–∞"
    style_note = STORY_STYLES.get(style, STORY_STYLES["–∫–ª–∞—Å—Å–∏–∫–∞"])

    def sent_pool():
        starts = [
            f"–ñ–∏–ª-–±—ã–ª {hero}, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∏–ª –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ç–∞–∫–æ–µ {moral}.",
            f"–û–¥–Ω–∞–∂–¥—ã {hero} –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –∑–∞–≥–∞–¥–∞–ª –¥–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä–æ–º {moral} —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–Ω–∞.",
            f"–° —Ä–∞–Ω–Ω–µ–≥–æ —É—Ç—Ä–∞ {hero} —á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–∞—É—á–∏—Ç—Å—è –∑–∞–º–µ—á–∞—Ç—å {moral}.",
        ]
        tries = [
            f"{hero.capitalize()} –ø–æ–º–æ–≥–∞–ª —Ç–µ–º, –∫—Ç–æ —Ä—è–¥–æ–º, –∏ –∑–∞–º–µ—á–∞–ª, –∫–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.",
            f"–ò–Ω–æ–≥–¥–∞ –±—ã–ª–æ —Ç—Ä—É–¥–Ω–æ, –Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –¥–∞–≤–∞–ª–∏ —Å–º–µ–ª–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.",
            f"–î—Ä—É–∑—å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∏, –∏ –≤–º–µ—Å—Ç–µ –æ–Ω–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã.",
            f"–ö–∞–∂–¥–∞—è –¥–æ–±—Ä–∞—è –º—ã—Å–ª—å –ø—Ä–µ–≤—Ä–∞—â–∞–ª–∞—Å—å –≤ —Ç–∏—Ö–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Äî –∏ —Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å —Å–≤–µ—Ç–ª–µ–µ.",
        ]
        reveals = [
            f"–ö –≤–µ—á–µ—Ä—É {hero} –ø–æ–Ω—è–ª: {moral} ‚Äî —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–æ, –∞ –ø–æ—Å—Ç—É–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≥—Ä–µ–≤–∞–µ—Ç.",
            f"–í–æ–∑–≤—Ä–∞—â–∞—è—Å—å –¥–æ–º–æ–π, {hero} —É–ª—ã–±–∞–ª—Å—è: {moral} –∂–∏–≤—ë—Ç –≤ –∑–∞–±–æ—Ç–µ –∏ –≤–Ω–∏–º–∞–Ω–∏–∏.",
            f"–¢–∞–∫ {hero} –∑–∞–ø–æ–º–Ω–∏–ª: –µ—Å–ª–∏ –¥–µ–ª–∏—à—å—Å—è —Ç–µ–ø–ª–æ–º, {moral} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–∞–º–µ—Ç–Ω–æ–π –¥–ª—è –≤—Å–µ—Ö.",
        ]
        return starts, tries, reveals

    start_pool, try_pool, reveal_pool = sent_pool()
    paras = [random.choice(start_pool)]
    paras += random.sample(try_pool, k=2)
    paras.append(random.choice(try_pool))
    paras.append(random.choice(reveal_pool))

    # –°–±–æ—Ä–∫–∞, –∑–∞—Ç–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ/—Å–∂–∞—Ç–∏–µ –ø–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω
    text = "\n\n".join(paras)
    text = clamp_to_band_locally(text, target_band)
    text = _avoid_filter(text, avoid)

    title = f"{hero.capitalize()} –∏ —É—Ä–æ–∫ –ø—Ä–æ ¬´{moral}¬ª"
    questions = [
        f"–ß—Ç–æ {hero} –ø–æ–Ω—è–ª –ø—Ä–æ {moral}?",
        "–ö–∞–∫–∏–µ —à–∞–≥–∏ –ø–æ–º–æ–≥–ª–∏ –≥–µ—Ä–æ—è–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å—Å—è?",
        "–ì–¥–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞—Å—å –¥—Ä—É–∂–±–∞?",
        "–ö–∞–∫ –±—ã —Ç—ã –ø–æ—Å—Ç—É–ø–∏–ª(–∞) –Ω–∞ –º–µ—Å—Ç–µ –≥–µ—Ä–æ—è?",
    ]
    moral_txt = f"–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å: {moral}. –î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–æ–±—Ä–æ –º–µ–Ω—è–µ—Ç –¥–µ–Ω—å."
    return {"title": title, "text": text, "moral": moral_txt, "questions": questions, "style_note": style_note}

def _json_from_response(resp) -> Dict[str, Any]:
    try:
        return json.loads(resp.output_text or "{}")
    except Exception:
        return {}

def synthesize_story(age: int, hero: str, moral: str, length: str, avoid: List[str], style: str) -> Dict[str, Any]:
    band = LEN_BANDS.get((length or "").lower(), LEN_BANDS["—Å—Ä–µ–¥–Ω—è—è"])
    hero  = hero or "–≥–µ—Ä–æ–π"
    moral = moral or "–¥–æ–±—Ä–æ—Ç–∞"
    style_note = STORY_STYLES.get(style, STORY_STYLES["–∫–ª–∞—Å—Å–∏–∫–∞"])

    # –ï—Å–ª–∏ –Ω–µ—Ç OpenAI ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–ª–∏–Ω—ã:
    if not oa_client:
        return _local_story(age, hero, moral, band, style, avoid)

    # 1) –ü–ª–∞–Ω
    try:
        prompt1 = f"""
–¢—ã ‚Äî –¥–µ—Ç—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ –ø–∏—Å–∞—Ç–µ–ª—å. –°–¥–µ–ª–∞–π –ø–ª–∞–Ω —Å–∫–∞–∑–∫–∏ (outline) –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ {age} –ª–µ—Ç.
–°—Ç–∏–ª—å: {style_note}. –ì–µ—Ä–æ–π: {hero}. –ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è/–º–æ—Ä–∞–ª—å: {moral}. –¢–µ–º –∏–∑–±–µ–≥–∞—Ç—å: {", ".join(avoid) or "–Ω–µ—Ç"}.
–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≤—è–∑–∫–∞ ‚Üí 3‚Äì4 —Å—Ü–µ–Ω—ã (—Ü–µ–ª—å, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ, —Ä–µ—à–µ–Ω–∏–µ) ‚Üí —Å–≤–µ—Ç–ª–∞—è —Ä–∞–∑–≤—è–∑–∫–∞ ‚Üí —á—ë—Ç–∫–∞—è –º–æ—Ä–∞–ª—å.
–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ JSON: {{"title":"...","scenes":[{{"name":"...","beats":["...","..."]}}]}}
"""
        r1 = oa_client.responses.create(model=OPENAI_MODEL_TEXT, input=prompt1)
        outline = _json_from_response(r1)
        title = outline.get("title") or f"{hero.capitalize()} –∏ —É—Ä–æ–∫ –ø—Ä–æ ¬´{moral}¬ª"
    except Exception as e:
        print("[AI outline]", e)
        return _local_story(age, hero, moral, band, style, avoid)

    # 2) –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ –ø–ª–∞–Ω—É
    try:
        prompt2 = f"""
–ù–∞–ø–∏—à–∏ —Å–≤—è–∑–Ω—É—é —Å–∫–∞–∑–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ {age} –ª–µ—Ç –ø–æ –ø–ª–∞–Ω—É –Ω–∏–∂–µ.
–ü–ª–∞–Ω: {json.dumps(outline, ensure_ascii=False)}
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –û–±—ä—ë–º: {band[0]}‚Äì{band[1]} —Å–ª–æ–≤, —Å–æ–±–ª—é–¥–∞–π –¥–∏–∞–ø–∞–∑–æ–Ω.
- –Ø–∑—ã–∫: –ø—Ä–æ—Å—Ç–æ–π –∏ —Ç—ë–ø–ª—ã–π, –±–µ–∑ –≤–∑—Ä–æ—Å–ª–æ–π –ª–µ–∫—Å–∏–∫–∏, –±–µ–∑ —Ñ–æ—Ä–º "(–∞—Å—å)/(—ë–ª)".
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 3‚Äì6 –∞–±–∑–∞—Ü–µ–≤, –∫–∞–∂–¥—ã–π –ª–æ–≥–∏—á–µ—Å–∫–∏ –≤–µ–¥—ë—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.
- –í –∫–æ–Ω—Ü–µ –±–ª–æ–∫ "–ú–æ—Ä–∞–ª—å" (1‚Äì2 —Ñ—Ä–∞–∑—ã) –∏ 4 –≤–æ–ø—Ä–æ—Å–∞ —Ä–µ–±—ë–Ω–∫—É.
–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ JSON: {{"text":"...","moral":"...","questions":["...","...","...","..."]}}
"""
        r2 = oa_client.responses.create(model=OPENAI_MODEL_TEXT, input=prompt2)
        draft = _json_from_response(r2)
        text = draft.get("text","")
        moral_txt = draft.get("moral") or f"–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å: {moral}."
        questions = draft.get("questions") or [
            f"–ß—Ç–æ {hero} –ø–æ–Ω—è–ª –ø—Ä–æ {moral}?", "–ö–∞–∫–∏–µ —à–∞–≥–∏ –ø–æ–º–æ–≥–ª–∏ –≥–µ—Ä–æ—è–º?",
            "–ì–¥–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥—Ä—É–∂–±–∞?", "–ö–∞–∫ –±—ã —Ç—ã –ø–æ—Å—Ç—É–ø–∏–ª(–∞)?"
        ]
    except Exception as e:
        print("[AI draft]", e)
        return _local_story(age, hero, moral, band, style, avoid)

    # 3) –ö—Ä–∏—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–∫–∞ (–µ—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
    try:
        needs_fix = False
        if not within_band(text, band): needs_fix = True
        # –ú–∏–Ω–∏-—á–µ–∫–ª–∏—Å—Ç: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—å –≥–µ—Ä–æ—è, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è, —Ä–∞–∑–≤—è–∑–∫–∞, —è–≤–Ω–∞—è –º–æ—Ä–∞–ª—å.
        checklist = [
            ("—Ü–µ–ª—å –≥–µ—Ä–æ—è", re.search(r"—Ö–æ—á–µ—Ç|—Ä–µ—à–∏–ª|–º–µ—á—Ç–∞–ª|—Ü–µ–ª—å", text, re.IGNORECASE)),
            ("–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ/—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏", re.search(r"—Ç—Ä—É–¥–Ω|–ø—Ä–µ–ø—è—Ç—Å—Ç–≤|–Ω–µ –ø—Ä–æ—Å—Ç–æ|–º–µ—à–∞–ª", text, re.IGNORECASE)),
            ("—Ä–∞–∑–≤—è–∑–∫–∞/–≤—ã–≤–æ–¥", re.search(r"–∫ –≤–µ—á–µ—Ä—É|–≤ –∫–æ–Ω—Ü–µ|–ø–æ–Ω—è–ª|–∏—Ç–æ–≥|–≤—ã–≤–æ–¥", text, re.IGNORECASE)),
        ]
        if any(v is None for _, v in checklist): needs_fix = True

        if needs_fix:
            prompt3 = f"""
–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ {age} –ª–µ—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ —Å–≤—è–∑–Ω–æ–π –∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {band[0]}‚Äì{band[1]} —Å–ª–æ–≤.
–°–æ–±–ª—é–¥–∞–π: —Ü–µ–ª—å –≥–µ—Ä–æ—è ‚Üí –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è ‚Üí —Ä–µ—à–µ–Ω–∏—è ‚Üí —Å–≤–µ—Ç–ª–∞—è —Ä–∞–∑–≤—è–∑–∫–∞ + —è–≤–Ω–∞—è –º–æ—Ä–∞–ª—å.
–°–¥–µ–ª–∞–π —è–∑—ã–∫ —Ç—ë–ø–ª—ã–º –∏ –ø—Ä–æ—Å—Ç—ã–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤–∑—Ä–æ—Å–ª—ã–µ —Ç–µ–º—ã.
–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON {{"text":"...","moral":"...","questions":[...]}}, 4 –≤–æ–ø—Ä–æ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
–ò—Å—Ö–æ–¥–Ω—ã–π JSON: {json.dumps({"text": text, "moral": moral_txt, "questions": questions}, ensure_ascii=False)}
"""
            r3 = oa_client.responses.create(model=OPENAI_MODEL_TEXT, input=prompt3)
            data = _json_from_response(r3)
            text = data.get("text", text)
            moral_txt = data.get("moral", moral_txt)
            questions = (data.get("questions") or questions)[:4]
    except Exception as e:
        print("[AI revise]", e)

    # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ –¥–ª–∏–Ω–µ (–ª–æ–∫–∞–ª—å–Ω–æ)
    text = clamp_to_band_locally(text, band)
    text = _avoid_filter(text, avoid)

    return {"title": title, "text": text, "moral": moral_txt, "questions": questions}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# PDF (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class StoryPDF(FPDF):
    def header(self): pass

def _ensure_unicode_fonts(pdf: FPDF) -> bool:
    try:
        if not (FONT_REG.exists() and FONT_BOLD.exists()):
            print("[PDF] TTF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (fonts/DejaVuSans*.ttf)")
            return False
        pdf.add_font(PDF_FONT,   "", str(FONT_REG),  uni=True)
        pdf.add_font(PDF_FONT_B, "", str(FONT_BOLD), uni=True)
        return True
    except Exception as e:
        print(f"[PDF] font error: {e}")
        return False

def render_story_pdf(path: Path, data: Dict[str, Any]):
    pdf = StoryPDF(orientation="P", unit="mm", format="A4")
    pdf.set_auto_page_break(auto=True, margin=15)
    uni = _ensure_unicode_fonts(pdf)

    # —Ç–∏—Ç—É–ª
    pdf.add_page()
    pdf.set_fill_color(235, 240, 255)
    pdf.rect(0, 0, 210, 297, style="F")
    pdf.set_draw_color(60, 80, 180); pdf.set_line_width(1.2)
    pdf.rect(8, 8, 210-16, 297-16)

    if uni: pdf.set_font(PDF_FONT_B, size=26)
    else:   pdf.set_font("Helvetica", style="B", size=26)
    pdf.set_xy(15, 60)
    pdf.multi_cell(0, 12, data["title"], align="C")

    if uni: pdf.set_font(PDF_FONT, size=12)
    else:   pdf.set_font("Helvetica", size=12)
    meta = f"–°–æ–∑–¥–∞–Ω–æ: {msk_now().strftime('%d.%m.%Y')}"
    pdf.ln(4); pdf.multi_cell(0, 8, meta, align="C")

    # —Ç–µ–∫—Å—Ç
    pdf.add_page()
    if uni: pdf.set_font(PDF_FONT_B, size=16)
    else:   pdf.set_font("Helvetica", style="B", size=16)
    pdf.multi_cell(0, 8, data["title"]); pdf.ln(2)

    if uni: pdf.set_font(PDF_FONT, size=12)
    else:   pdf.set_font("Helvetica", size=12)
    for p in data["text"].split("\n\n"):
        pdf.multi_cell(0, 7, p); pdf.ln(1)

    pdf.ln(2)
    if uni: pdf.set_font(PDF_FONT_B, size=13)
    else:   pdf.set_font("Helvetica", style="B", size=13)
    pdf.cell(0, 7, "–ú–æ—Ä–∞–ª—å", ln=1)

    if uni: pdf.set_font(PDF_FONT, size=12)
    else:   pdf.set_font("Helvetica", size=12)
    pdf.multi_cell(0, 7, data["moral"]); pdf.ln(2)

    if uni: pdf.set_font(PDF_FONT_B, size=13)
    else:   pdf.set_font("Helvetica", style="B", size=13)
    pdf.cell(0, 7, "–í–æ–ø—Ä–æ—Å—ã", ln=1)

    if uni: pdf.set_font(PDF_FONT, size=12)
    else:   pdf.set_font("Helvetica", size=12)
    for i, q in enumerate(data["questions"][:4], 1):
        pdf.multi_cell(0, 7, f"{i}) {q}")

    pdf.output(str(Path(path)))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–û–ú–ê–ù–î–´ –ò –î–ò–ê–õ–û–ì
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _safe_int(text: str, default: int) -> int:
    try: return max(3, min(14, int(text)))
    except Exception: return default

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args or []
    if args and args[0].lower() in {"story","math","parent","settings","delete"}:
        return await globals()[args[0].lower()+"_cmd"](update, context)
    await update.effective_message.reply_html(
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ß–∏—Ç–∞–ª–∫–∏–Ω&–¶–∏—Ñ–µ—Ä–∫–∏–Ω ü¶â‚ûïüßÆ</b>\n\n"
        "‚Ä¢ /story ‚Äî —Å–∫–∞–∑–∫–∞ (—Ç–µ–∫—Å—Ç ‚Üí PDF)\n"
        "‚Ä¢ /math ‚Äî 10 –º–∏–Ω—É—Ç –ø—Ä–∏–º–µ—Ä–æ–≤\n"
        "‚Ä¢ /parent ‚Äî –æ—Ç—á—ë—Ç —Ä–æ–¥–∏—Ç–µ–ª—é\n"
        "‚Ä¢ /settings ‚Äî –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±—ë–Ω–∫–∞ (–≤–æ–∑—Ä–∞—Å—Ç, –≥–µ—Ä–æ–π, –¥–ª–∏–Ω–∞, —Å—Ç–∏–ª—å, ¬´–∏–∑–±–µ–≥–∞—Ç—å¬ª)\n"
        "‚Ä¢ /delete ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
        f"<i>–õ–∏–º–∏—Ç: {'–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (—Ç–µ—Å—Ç) ' if DISABLE_LIMIT else str(MAX_STORIES_PER_DAY)+'/–¥–µ–Ω—å'}; —Å–±—Ä–æ—Å –≤ 00:00 –ú—Å–∫.</i>"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def settings_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    prof = get_profile(uid)
    ud = context.user_data; ud.clear()
    ud["flow"] = "settings"; ud["step"] = "age"; ud["profile"] = prof.copy()
    await update.effective_message.reply_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
        f"–°–µ–π—á–∞—Å: –≤–æ–∑—Ä–∞—Å—Ç={prof['age']}, –≥–µ—Ä–æ–π=¬´{prof['hero']}¬ª, –¥–ª–∏–Ω–∞={prof['length']}, —Å—Ç–∏–ª—å=¬´{prof['style']}¬ª, –∏–∑–±–µ–≥–∞—Ç—å={', '.join(prof['avoid']) or '‚Äî'}.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (3‚Äì14):"
    )

async def story_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ustat = get_user_stats(uid)
    if not DISABLE_LIMIT and ustat["today_stories"] >= MAX_STORIES_PER_DAY:
        await update.effective_message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω."); return

    prof = get_profile(uid)
    ud = context.user_data; ud.clear()
    ud["flow"] = "story"; ud["step"] = "age"; ud["params"] = {
        "age": prof["age"], "hero": prof["hero"], "length": prof["length"], "style": prof["style"]
    }
    await update.effective_message.reply_text(
        f"–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Å–∫–∞–∑–∫—É. –°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–µ–±—ë–Ω–∫—É? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {prof['age']})"
    )

async def parent_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    u = get_user_stats(uid)
    last_title = u.get("last_story_title") or "‚Äî"
    last_when = u.get("last_story_ts")
    if last_when:
        try:
            last_when = datetime.fromisoformat(last_when).astimezone(TZ_MSK).strftime("%d.%m.%Y %H:%M")
        except Exception:
            last_when = "‚Äî"
    else:
        last_when = "‚Äî"
    prof = get_profile(uid)
    await update.effective_message.reply_text(
        "üë™ –û—Ç—á—ë—Ç —Ä–æ–¥–∏—Ç–µ–ª—é\n\n"
        f"–°–µ–≥–æ–¥–Ω—è: —Å–∫–∞–∑–æ–∫ {u.get('today_stories',0)} / {('‚àû' if DISABLE_LIMIT else MAX_STORIES_PER_DAY)}\n"
        f"–ò—Ç–æ–≥–æ: —Å–∫–∞–∑–æ–∫ {u.get('stories_total',0)}, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ {u.get('math_total',0)}\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∫–∞–∑–∫–∞: {last_title} ‚Ä¢ {last_when}\n\n"
        "–ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"–≤–æ–∑—Ä–∞—Å—Ç={prof['age']}, –≥–µ—Ä–æ–π=¬´{prof['hero']}¬ª, –¥–ª–∏–Ω–∞={prof['length']}, —Å—Ç–∏–ª—å=¬´{prof['style']}¬ª, –∏–∑–±–µ–≥–∞—Ç—å={', '.join(prof['avoid']) or '‚Äî'}"
    )

async def delete_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    stats_all.pop(str(uid), None); save_json(STATS_PATH, stats_all)
    stories_all.pop(str(uid), None); save_json(STORIES_PATH, stories_all)
    context.user_data.clear()
    await update.effective_message.reply_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üôÇ")

def make_math_sheet():
    problems, answers = [], []
    for _ in range(10):
        a, b = random.randint(4, 15), random.randint(1, 9)
        if random.random() < 0.5:
            problems.append(f"{a} + {b} = "); answers.append(str(a + b))
        else:
            if b > a: a, b = b, a
            problems.append(f"{a} ‚àí {b} = "); answers.append(str(a - b))
    return problems, answers

async def math_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    pr, an = make_math_sheet()
    await update.effective_message.reply_text("üßÆ 10 –º–∏–Ω—É—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏:\n" + "\n".join([f"{i+1}) {p}" for i,p in enumerate(pr)]))
    await update.effective_message.reply_text("–û—Ç–≤–µ—Ç—ã:\n" + "\n".join([f"{i+1}) {a}" for i,a in enumerate(an)]))
    inc_math_counter(uid)

# —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–≥–∏ (settings/story)
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ud = context.user_data; flow = ud.get("flow"); step = ud.get("step")
    if not flow: return
    text = (update.effective_message.text or "").strip()

    if flow == "settings":
        prof = ud.get("profile", {})
        if step == "age":
            prof["age"] = _safe_int(text, prof.get("age",6)); ud["step"] = "hero"
            await update.effective_message.reply_text("–ì–µ—Ä–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–æ—Ç—ë–Ω–æ–∫, —ë–∂–∏–∫, –ú–∞—à–∞):"); return
        if step == "hero":
            prof["hero"] = text or prof.get("hero","–≥–µ—Ä–æ–π"); ud["step"] = "length"
            await update.effective_message.reply_text("–î–ª–∏–Ω–∞ —Å–∫–∞–∑–∫–∏? (–∫–æ—Ä–æ—Ç–∫–∞—è / —Å—Ä–µ–¥–Ω—è—è / –¥–ª–∏–Ω–Ω–∞—è)"); return
        if step == "length":
            l = text.lower(); prof["length"] = l if l in LEN_BANDS else "—Å—Ä–µ–¥–Ω—è—è"
            ud["step"] = "style"
            await update.effective_message.reply_text("–°—Ç–∏–ª—å? (–∫–ª–∞—Å—Å–∏–∫–∞ / –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ / –¥–µ—Ç–µ–∫—Ç–∏–≤ / —Ñ–∞–Ω—Ç–∞–∑–∏—è / –Ω–∞—É—á–ø–æ–ø)"); return
        if step == "style":
            st = text.lower(); prof["style"] = st if st in STORY_STYLES else "–∫–ª–∞—Å—Å–∏–∫–∞"
            ud["step"] = "avoid"
            await update.effective_message.reply_text("–ö–∞–∫–∏—Ö —Ç–µ–º –∏–∑–±–µ–≥–∞—Ç—å? –ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ ¬´–Ω–µ—Ç¬ª)."); return
        if step == "avoid":
            prof["avoid"] = [] if text.lower() in {"–Ω–µ—Ç","no","none"} else [w.strip() for w in text.split(",") if w.strip()]
            save_profile(update.effective_user.id, prof); ud.clear()
            await update.effective_message.reply_text("–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ"); return

    if flow == "story":
        p = ud["params"]
        if step == "age":
            p["age"] = _safe_int(text, p.get("age",6)); ud["step"] = "hero"
            await update.effective_message.reply_text(f"–ö—Ç–æ –±—É–¥–µ—Ç –≥–µ—Ä–æ–µ–º? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ¬´{p.get('hero','–≥–µ—Ä–æ–π')}¬ª)"); return
        if step == "hero":
            p["hero"] = text or p.get("hero","–≥–µ—Ä–æ–π"); ud["step"] = "moral"
            await update.effective_message.reply_text("–ö–∞–∫—É—é –∏–¥–µ—é/–º–æ—Ä–∞–ª—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å? (–¥—Ä—É–∂–±–∞, —â–µ–¥—Ä–æ—Å—Ç—å, —Å–º–µ–ª–æ—Å—Ç—å...)"); return
        if step == "moral":
            ud["moral"] = text or "–¥–æ–±—Ä–æ—Ç–∞"; ud["step"] = "length"
            await update.effective_message.reply_text(f"–ö–∞–∫–∞—è –¥–ª–∏–Ω–∞? (–∫–æ—Ä–æ—Ç–∫–∞—è / —Å—Ä–µ–¥–Ω—è—è / –¥–ª–∏–Ω–Ω–∞—è) ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {p.get('length','—Å—Ä–µ–¥–Ω—è—è')}"); return
        if step == "length":
            l = (text.lower() if text else p.get("length","—Å—Ä–µ–¥–Ω—è—è"))
            p["length"] = l if l in LEN_BANDS else "—Å—Ä–µ–¥–Ω—è—è"

            uid = update.effective_user.id
            prof = get_profile(uid)
            ustat = get_user_stats(uid)
            if not DISABLE_LIMIT and ustat["today_stories"] >= MAX_STORIES_PER_DAY:
                await update.effective_message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω."); ud.clear(); return

            data = synthesize_story(p["age"], p["hero"], ud["moral"], p["length"], avoid=prof["avoid"], style=prof["style"])
            inc_story_counters(uid, data["title"])
            store_user_story(uid, data)

            # —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç
            msg = (
                f"üìñ <b>{data['title']}</b>\n\n{data['text']}\n\n"
                f"<b>–ú–æ—Ä–∞–ª—å:</b> {data['moral']}\n\n"
                "–í–æ–ø—Ä–æ—Å—ã:\n"
                f"1) {data['questions'][0]}\n"
                f"2) {data['questions'][1]}\n"
                f"3) {data['questions'][2]}\n"
                f"4) {data['questions'][3]}"
            )
            await update.effective_message.reply_html(msg)

            # pdf
            pdf_path = Path(f"skazka_{uid}.pdf").resolve()
            render_story_pdf(pdf_path, data)
            await update.effective_message.reply_document(InputFile(str(pdf_path), filename=pdf_path.name))

            ud.clear(); return

# –æ—à–∏–±–∫–∏ ‚Üí –∞–ª—ë—Ä—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —á–∞—Ç)
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not ALERT_CHAT_ID:
        print("[ERR]", "".join(traceback.format_exception(None, context.error, context.error.__traceback__)))
        return
    try:
        tb = "".join(traceback.format_exception(None, context.error, context.error.__traceback__))
        text = "üö® <b>–û—à–∏–±–∫–∞</b>\n\n<pre>" + (tb[-3500:] if len(tb)>3500 else tb) + "</pre>"
        await context.bot.send_message(chat_id=int(ALERT_CHAT_ID), text=text, parse_mode="HTML")
    except Exception as e:
        print("[ERR alert send]", e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# RUN
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def post_init(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start","–º–µ–Ω—é"),
        BotCommand("story","—Å–∫–∞–∑–∫–∞ (—Ç–µ–∫—Å—Ç ‚Üí PDF)"),
        BotCommand("math","10 –º–∏–Ω—É—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏"),
        BotCommand("parent","–æ—Ç—á—ë—Ç —Ä–æ–¥–∏—Ç–µ–ª—é"),
        BotCommand("settings","–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"),
        BotCommand("delete","—É–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"),
        BotCommand("help","–ø–æ–º–æ—â—å"),
    ])

def main():
    if BOT_TOKEN.startswith("–í–°–¢–ê–í–¨_"):
        raise SystemExit("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ BOT_TOKEN (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è).")

    app = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("story", story_cmd))
    app.add_handler(CommandHandler("math", math_cmd))
    app.add_handler(CommandHandler("parent", parent_cmd))
    app.add_handler(CommandHandler("settings", settings_cmd))
    app.add_handler(CommandHandler("delete", delete_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_error_handler(error_handler)

    if PUBLIC_URL:
        path = (WEBHOOK_PATH or BOT_TOKEN).lstrip("/")
        webhook_url = f"{PUBLIC_URL.rstrip('/')}/{path}"
        print(f"[WEBHOOK] starting on 0.0.0.0:{PORT}, path=/{path}")
        print(f"[WEBHOOK] set webhook ‚Üí {webhook_url}")
        app.run_webhook(listen="0.0.0.0", port=PORT, url_path=path, webhook_url=webhook_url, drop_pending_updates=True)
    else:
        print("[POLLING] starting‚Ä¶")
        app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
